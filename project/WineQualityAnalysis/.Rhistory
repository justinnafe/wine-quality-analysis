geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
symbols <- c("MSFT","VIA/B","C","MMM", "SVM")
#' Create a new environment to store the data
data.env <- new.env()
#' Get the stock quotes of all valid symbols. Skip over the invalid
#' symbols. Get a list of symbols that downloaded correctly.
sym.list <- llply(symbols, function(sym) try(getSymbols(sym, env = data.env)))
symbols <- symbols[symbols %in% ls(data.env)]
test <- get("SVM", data.env)
#' I want to get the dates of events for each symbol.
#' I imagine a data frame with col names Symbol, EventDate
#'
#' Eventually I want Symbol, EventDate, PriceBeforeEvent, PriceAtEvent,
#' PriceAfterEvent, STD1DayLater, STD2DayLater?
adj <- test$MSFT.Adjusted
sma20 <- as.data.frame(SMA(adj, n=20))
sma50 <- as.data.frame(SMA(adj, n=50))
adj <- test$SVM.Adjusted
sma20 <- as.data.frame(SMA(adj, n=20))
sma50 <- as.data.frame(SMA(adj, n=50))
shiftdown <- function(x, n){
# Remove the last, add to the first
c(rep(NA, n), x[-(length(x) )])
}
temp <- c(rep(NA, 1),sma20[,1][-(length(sma20[,1]))])
prevlower <- shiftdown(sma20[,1], 1)
prevhigher <- shiftdown(sma50[,1], 1)
sma20 <- cbind(sma20, prevlower)
sma50 <- cbind(sma50, prevhigher)
colnames(sma20) <- c("lower", "prevlower")
colnames(sma50) <- c("higher", "prevhigher")
#' Merge into one
sma <- merge.zoo(as.xts(sma20), as.xts(sma50))
events.buy <- sma[sma$lower < sma$higher & sma$prevlower > sma$prevhigher,]
events <- as.Date(index(events.buy))
#' Now that we have the dates, subset the data and calculate the returns
#' based on that date for a window
getWindow <- function(x, event, win){
# Get set from the event onward
event.onward <- window(x, start=event, end=end(x))
result <- event.onward[1: win,]
result
}
win <- 14
event.prices <- getWindow(adj, events[3], as.numeric(win))
event.prices2 <- getWindow(adj, events[4], as.numeric(win))
head(event.prices)
returns <- as.data.frame(dailyReturn(event.prices))
returns2 <- as.data.frame(dailyReturn(event.prices2))
# create a column called periods
ret <- cbind(c(1:14), returns, returns2)
colnames(ret) <- c("periods", "ret1", "ret2")
head(ret)
tail(ret)
# make data long
ret.long <- melt(ret, id="periods")
ggplot(ret.long, aes(x=periods, y=value, color=variable)) +
geom_line() +
geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
rep(1:14)
rep(0, 14)
getIncReturns <- function(x, length){
result <- rep(0, length)
}
getIncReturns(ret, 14)
getIncReturns <- function(x, length){
result <- rep(0, length)
result
}
getIncReturns(ret, 14)
getIncReturns <- function(x, length){
result <- rep(0, len)
for(index in 2:len){
result[index] <- result[index - 1] + x[index]
}
result
}
getIncReturns(ret$ret1, 14)
getIncReturns <- function(x, len){
result <- rep(0, len)
for(index in 2:len){
result[index] <- result[index - 1] + x[index]
}
result
}
getIncReturns(ret$ret1, 14)
inc1 <- getIncReturns(ret$ret1, 14)
inc2 <- getIncReturns(ret$ret2, 14)
incret <- cbind(c(1:14), inc1, inc2)
head(incret)
inc1 <- getIncReturns(ret$ret1, 14)
inc2 <- getIncReturns(ret$ret2, 14)
incret <- cbind(c(1:14), inc1, inc2)
colnames(incret)[1] <- "periods"
incret.long <- melt(incret, id="periods")
ggplot(incret.long, aes(x=periods, y=value, color=variable)) +
geom_line() +
geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
incret
incret.long
getIncReturns <- function(x, len){
result <- rep(0, len)
for(index in 2:len){
result[index] <- result[index - 1] + x[index]
}
as.data.frame(result)
}
inc1 <- getIncReturns(ret$ret1, 14)
inc2 <- getIncReturns(ret$ret2, 14)
incret <- cbind(c(1:14), inc1, inc2)
colnames(incret)[1] <- "periods"
incret.long <- melt(incret, id="periods")
ggplot(incret.long, aes(x=periods, y=value, color=variable)) +
geom_line() +
geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
incret
incret.long
ret
class(ret)
class(incret.long)
class(incret)
colnames(incret) <- c("periods", "inc1", "inc2")
incret.long <- melt(incret, id="periods")
ggplot(incret.long, aes(x=periods, y=value, color=variable)) +
geom_line() +
geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
?avg
?average
?mean
x <- c(0:10, 50)
xm <- mean(x)
c(xm, mean(x, trim = 0.10))
x
?rapply
getRowMean <- function(x){
result <- rep(0, length(x[,1]))
for(index in 1:length(x[,1])){
result[index] <- mean(x[index,2:length(colnames(x))])
}
as.data.frame(result)
}
getRowMean(incret)
rep(0, length(incret[,1]))
mean(incret[2,2:length(colnames(x))])
length(colnames(incret))])
length(colnames(incret))
mean(incret[2,2:3])
incret[2,2:3]
as.numeric(incret[2,2:3])
getRowMean <- function(x){
result <- rep(0, length(x[,1]))
for(index in 1:length(x[,1])){
result[index] <- mean(as.numeric(x[index,2:length(colnames(x))]))
}
as.data.frame(result)
}
getRowMean(incret)
av <- getRowMean(incret)
av <- colbind(c(1:14), av)
av <- cbind(c(1:14), av)
av
colnames(av) <- c("periods", "avg")
ggplot(incret.long, aes(x=periods, y=avg)) +
geom_line() +
geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
ggplot(av, aes(x=periods, y=avg)) +
geom_line() +
geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
ggplot(incret.long, aes(x=periods, y=value, color=variable)) +
geom_line() +
geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
# I can get the averages of the inc returns
getRowMean <- function(x){
result <- rep(0, length(x[,1]))
for(index in 1:length(x[,1])){
result[index] <- mean(as.numeric(x[index,2:length(colnames(x))]))
}
as.data.frame(result)
}
av <- getRowMean(incret)
av <- cbind(c(1:14), av)
colnames(av) <- c("periods", "avg")
ggplot(av, aes(x=periods, y=avg)) +
geom_line() +
geom_smooth(method="lm") +
xlab("days") +
ylab("daily returns") +
geom_hline(aes(yintercept=0), colour="#990000", linetype="dashed")
inc1
getIncReturns <- function(x, len){
result <- rep(0, len)
for(index in 1:len){
result[index] <- result[index - 1] + x[index]
}
as.data.frame(result)
}
inc1 <- getIncReturns(ret$ret1, 14)
getIncReturns <- function(x, len){
result <- rep(0, len)
for(index in 2:len){
result[index] <- result[index - 1] + x[index]
}
as.data.frame(result)
}
install.packages("packrat")
lambda <- 0.2
numberSims <- 1000
sims <- data.frame(
x = c(matrix(rexp(numberSims * 10, lambda), numberSims),
matrix(rexp(numberSims * 20, lambda), numberSims),
matrix(rexp(numberSims * 30, lambda), numberSims),
matrix(rexp(numberSims * 40, lambda), numberSims),
)
)
lambda <- 0.2
numberSims <- 1000
sims <- data.frame(
x = c(matrix(rexp(numberSims * 10, lambda), numberSims),
matrix(rexp(numberSims * 20, lambda), numberSims),
matrix(rexp(numberSims * 30, lambda), numberSims),
matrix(rexp(numberSims * 40, lambda), numberSims))
)
head(x)
head(sims)
dim(sims)
lambda <- 0.2
numberSims <- 1000
sims <- data.frame(
x = c(matrix(rexp(numberSims * 10, lambda), numberSims),
matrix(rexp(numberSims * 20, lambda), numberSims),
matrix(rexp(numberSims * 30, lambda), numberSims),
matrix(rexp(numberSims * 40, lambda), numberSims),
size = factor(rep(c(10, 20, 30, 40), rep(numberSims, 4))))
)
head(sims)
lambda <- 0.2
numberSims <- 1000
sims <- data.frame(
x = c(matrix(rexp(numberSims * 10, lambda), numberSims),
matrix(rexp(numberSims * 20, lambda), numberSims),
matrix(rexp(numberSims * 30, lambda), numberSims),
matrix(rexp(numberSims * 40, lambda), numberSims))
size = factor(rep(c(10, 20, 30, 40), rep(numberSims, 4)))
lambda <- 0.2
numberSims <- 1000
sims <- data.frame(
x = c(matrix(rexp(numberSims * 10, lambda), numberSims),
matrix(rexp(numberSims * 20, lambda), numberSims),
matrix(rexp(numberSims * 30, lambda), numberSims),
matrix(rexp(numberSims * 40, lambda), numberSims)),
size = factor(rep(c(10, 20, 30, 40), rep(numberSims, 4)))
)
head(sims)
head(sims$x)
?matrix
test <- matrix(rexp(numberSims * 10, lambda), numberSims)
head(test)
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
x = c(matrix(rexp(numberSims * 10, lambda), numberSims),
matrix(rexp(numberSims * 20, lambda), numberSims),
matrix(rexp(numberSims * 30, lambda), numberSims),
matrix(rexp(numberSims * 40, lambda), numberSims))
head(x)
head(x[1])
lambda <- 0.2
numberSims <- 1000
# Create sets of exponentials
set10 <- matrix(rexp(numberSims * 10, lambda), numberSims)
set25 <- matrix(rexp(numberSims * 25, lambda), numberSims)
set40 <- matrix(rexp(numberSims * 40, lambda), numberSims)
# Create the set of averages from the sets of exponentials
simMeans <- data.frame(
x = c(apply(set10, 1, mean),
apply(set25, 1, mean),
apply(set40, 1, mean)),
size = factor(rep(c(10, 25, 40), rep(numberSims, 3)))
)
# Create the set of variances from the sets of exponentials
simVars <- data.frame(
x = c(apply(set10, 1, var),
apply(set25, 1, var),
apply(set40, 1, var)),
size = factor(rep(c(10, 25, 40), rep(numberSims, 3)))
)
g <- ggplot(simMeans, aes(x = x, fill = size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
library(ggplot2)
g <- ggplot(simMeans, aes(x = x, fill = size)) + geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
g <- ggplot(simMeans, aes(x = x, fill = size)) +
geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..)) +
facet_grid(. ~ size)
ggplot(simMeans, aes(x = x, fill = size)) +
geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..)) +
facet_grid(. ~ size)
?geom_vline
simMeans <- data.frame(
x = c(apply(set10, 1, mean),
apply(set25, 1, mean),
apply(set40, 1, mean)),
size = factor(rep(c(10, 25, 40), rep(numberSims, 3))),
vline = c(mean(x[1]), mean(x[2]), mean(x[3]))
)
ggplot(simMeans, aes(x = x, fill = size)) +
geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..)) +
facet_grid(. ~ size) +
geom_vline(aes(xintercept=vline))
simMeans <- data.frame(
x = c(apply(set10, 1, mean),
apply(set25, 1, mean),
apply(set40, 1, mean)),
size = factor(rep(c(10, 25, 40), rep(numberSims, 3)))
)
vline <- c(mean(simMeans$x[simMeans$size == 10]), mean(simMeans$x[simMeans$size == 25]), mean(simMeans$x[simMeans$size == 40]))
# Create the set of variances from the sets of exponentials
simVars <- data.frame(
x = c(apply(set10, 1, var),
apply(set25, 1, var),
apply(set40, 1, var)),
size = factor(rep(c(10, 25, 40), rep(numberSims, 3)))
)
ggplot(simMeans, aes(x = x, fill = size)) +
geom_histogram(binwidth=.3, colour = "black", aes(y = ..density..)) +
facet_grid(. ~ size) +
geom_vline(aes(xintercept=vline))
ggplot(simMeans, aes(x = x, fill = size)) +
geom_histogram(binwidth=.3, colour = "black") +
facet_grid(. ~ size) +
geom_vline(aes(xintercept=vMeanLine)) +
ggtitle("Sample Mean Exponential Distribution")
vMeanLine <- c(mean(simMeans$x[simMeans$size == 10]),
mean(simMeans$x[simMeans$size == 25]),
mean(simMeans$x[simMeans$size == 40]))
# Create the set of variances from the sets of exponentials
ggplot(simMeans, aes(x = x, fill = size)) +
geom_histogram(binwidth=.3, colour = "black") +
facet_grid(. ~ size) +
geom_vline(aes(xintercept=vMeanLine)) +
ggtitle("Sample Mean Exponential Distribution")
?set.seed
install.packages("pdflatex")
library(MASS)
?shuttle
shuttle
library(swirl)
swirl()
fit <- glm(formula = shuttle$use ~ shuttle$wind, family="binomial")
summary(fit)
swirl()
view(ravenData)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, "binomial", ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
library(swirl)
swirl()
var(rpois(1000, 50))
library(MASS)
?shuttle
shuttle
data <- shuttle
# mutate the data to "use" auto = 1 and leave the other?
# predict gives us log odds, so may need to use exp(lodds)/(1+exp(lodds)) after predict
fit <- glm(formula = shuttle$use ~ shuttle$wind, family="binomial")
summary(fit)
?predict
lodds <- predict(fit)
exp(lodds)/(1 + exp(lodds))
plot(exp(lodds)/(1 + exp(lodds)))
plot(fit)
fit <- glm(formula = I(1 * (use == 'auto')) ~ wind, family="binomial", data=shuttle)
summary(fit)
lodds <- predict(fit)
plot(exp(lodds)/(1 + exp(lodds)))
exp(fit$coef)
fit <- glm(formula = I(1 * (use == 'auto')) ~ wind - 1, family="binomial", data=shuttle)
summary(fit)
exp(fit$coef)
exp(fit$coef[1])/exp(fit$coef[2])
fit <- glm(formula = I(1 * (use == 'auto')) ~ wind + magn - 1, family="binomial", data=shuttle)
summary(fit)
exp(fit$coef)
exp(fit$coef[1])/exp(fit$coef[2])
swirl()
nxt()
view(hits)
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
head(InsectSprays)
fit <- glm(count ~ spray, poisson, InsectSprays)
summary(fit)
fit <- glm(count ~ spray - 1, poisson, InsectSprays)
summary(fit)
fit$coef[1]/fit$coef[2]
head(InsectSprays)
fit <- glm(count ~ spray - 1, poisson, InsectSprays)
summary(fit)
oddsA <- exp(fit$coef[1])/exp(fit$coef[2])
oddsB <- exp(fit$coef[2])/exp(fit$coef[1])
oddsA/oddsB
dim(InsectSprays)
data <- InsectSprays[InsectSprays$spray == "A" | InsectSprays$spray == "A", ]
dim(data)
fit <- glm(count ~ spray - 1, poisson, data)
dim(InsectSprays)
data <- InsectSprays[InsectSprays$spray == "A" | InsectSprays$spray == "B", ]
dim(data)
fit <- glm(count ~ spray - 1, poisson, data)
summary(fit)
oddsA <- exp(fit$coef[1])/exp(fit$coef[2])
oddsB <- exp(fit$coef[2])/exp(fit$coef[1])
oddsA/oddsB
fit <- glm(count ~ spray, poisson, data)
summary(fit)
oddsA <- exp(fit$coef[1])/exp(fit$coef[2])
oddsB <- exp(fit$coef[2])/exp(fit$coef[1])
oddsA/oddsB
summary(fit)
oddsA <- exp(fit$coef[1])/exp(fit$coef[2] + fit$coef[1])
oddsB <- exp(fit$coef[2] + fit$coef[1])/exp(fit$coef[1])
oddsA/oddsB
oddsA <- fit$coef[1]/(fit$coef[2] + fit$coef[1])
oddsB <- (fit$coef[2] + fit$coef[1])/fit$coef[1]
oddsA/oddsB
oddsA <- exp(fit$coef[1])/exp(fit$coef[2] + fit$coef[1])
oddsB <- exp(fit$coef[2] + fit$coef[1])/exp(fit$coef[1])
oddsA/oddsB
oddsA
oddsA <- fit$coef[1]/(fit$coef[2] + fit$coef[1])
oddsB <- (fit$coef[2] + fit$coef[1])/fit$coef[1]
oddsA/oddsB
oddsA
summary(fit)
oddsA <- exp(fit$coef[1])/exp(fit$coef[2] + fit$coef[1])
oddsA
fit1 <- glm(count ~ spray + offset(2), family = poisson, InsectSpray)
fit1 <- glm(count ~ spray + offset(2), family = poisson, InsectSprays)
?offset
?rep
nrows(InsectSprays)
nrow(InsectSprays)
fit1 <- glm(count ~ spray + offset(rep(1, nrow(InsectSprays))), family = poisson, InsectSprays)
fit2 <- glm(count ~ spray + offset(rep(log(10), nrow(InsectSprays)) + rep(2, nrow(InsectSprays))), family = poisson, InsectSprays)
fit1 <- glm(count ~ spray + offset(rep(2, nrow(InsectSprays))), family = poisson, InsectSprays)
fit2 <- glm(count ~ spray + offset(rep(log(10), nrow(InsectSprays)) + rep(2, nrow(InsectSprays))), family = poisson, InsectSprays)
fit1$coef
fit2$coef
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(y)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat -1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
summary(yhat)
summary(lm(y ~ xMat -1))
xMat
df <- data.frame(xMat)
df <- cbind(y, df)
names(df) <- c("y", "Intercept", "x", "splines")
lm(y ~ . - 1, data=df)
install.packages("ggplot2")
library(ggplot2)
install.packages(rCharts)
install.packages("rCharts")
require(rCharts)
shinyapps::setAccountInfo(name='justinnafe', token='9576FBDC78290A4B19618C8353711540', secret='Wz8TKeWbSqq3WDXXxYcs0Ox2KYK9thy+RT/7WI8E')
install.packages("shinyapps")
install.packages("shinyapps")
getwd()
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
devtools::install_github('muschellij2/slidify')
library(slidify)
setwd("C:\\Users\\Justin\\SandboxGit\\WineQualityAnalysis\\project\\WineQualityAnalysis")
slidify("index.Rmd")
